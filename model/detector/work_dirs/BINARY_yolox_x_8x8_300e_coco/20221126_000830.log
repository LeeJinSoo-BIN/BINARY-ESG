2022-11-26 00:08:34,848 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
CUDA available: True
GPU 0: NVIDIA GeForce GTX 1060 6GB
CUDA_HOME: D:\program\NVIDIA GPU Computing Toolkit\CUDA\v.11.7
NVCC: Cuda compilation tools, release 11.7, V11.7.64
MSVC: Microsoft (R) C/C++ 최적화 컴파일러 버전 19.28.29914(x64)
GCC: n/a
PyTorch: 1.13.0+cu117
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/actions-runner/_work/pytorch/pytorch/builder/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.0+cu117
OpenCV: 4.5.2
MMCV: 1.7.0
MMCV Compiler: MSVC 192829924
MMCV CUDA Compiler: 11.7
MMDetection: 2.25.3+4be49fc
------------------------------------------------------------

2022-11-26 00:08:35,107 - mmdet - INFO - Distributed training: False
2022-11-26 00:08:35,358 - mmdet - INFO - Config:
optimizer = dict(
    type='SGD',
    lr=0.01,
    momentum=0.9,
    weight_decay=0.0005,
    nesterov=True,
    paramwise_cfg=dict(norm_decay_mult=0.0, bias_decay_mult=0.0))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='YOLOX',
    warmup='exp',
    by_epoch=False,
    warmup_by_epoch=True,
    warmup_ratio=1,
    warmup_iters=5,
    num_last_epochs=15,
    min_lr_ratio=0.05)
runner = dict(type='EpochBasedRunner', max_epochs=300)
checkpoint_config = dict(interval=10)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [
    dict(type='YOLOXModeSwitchHook', num_last_epochs=15, priority=48),
    dict(type='SyncNormHook', num_last_epochs=15, interval=10, priority=48),
    dict(
        type='ExpMomentumEMAHook',
        resume_from=None,
        momentum=0.0001,
        priority=49)
]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
auto_scale_lr = dict(enable=False, base_batch_size=64)
img_scale = (640, 640)
model = dict(
    type='YOLOX',
    input_size=(640, 640),
    random_size_range=(15, 25),
    random_size_interval=10,
    backbone=dict(type='CSPDarknet', deepen_factor=1.33, widen_factor=1.25),
    neck=dict(
        type='YOLOXPAFPN',
        in_channels=[320, 640, 1280],
        out_channels=320,
        num_csp_blocks=4),
    bbox_head=dict(
        type='YOLOXHead', num_classes=80, in_channels=320, feat_channels=320),
    train_cfg=dict(assigner=dict(type='SimOTAAssigner', center_radius=2.5)),
    test_cfg=dict(score_thr=0.01, nms=dict(type='nms', iou_threshold=0.65)))
data_root = './data/binary/'
dataset_type = 'CocoDataset'
train_pipeline = [
    dict(type='Mosaic', img_scale=(640, 640), pad_val=114.0),
    dict(
        type='RandomAffine', scaling_ratio_range=(0.1, 2),
        border=(-320, -320)),
    dict(
        type='MixUp',
        img_scale=(640, 640),
        ratio_range=(0.8, 1.6),
        pad_val=114.0),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='Resize', img_scale=(640, 640), keep_ratio=True),
    dict(
        type='Pad',
        pad_to_square=True,
        pad_val=dict(img=(114.0, 114.0, 114.0))),
    dict(type='FilterAnnotations', min_gt_bbox_wh=(1, 1), keep_empty=False),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
train_dataset = dict(
    type='BINARY_ESG_Dataset',
    dataset=dict(
        type='CocoDataset',
        ann_file='./data/binary/annotations/instances_train_esg.json',
        img_prefix='./data/binary/train_esg/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True)
        ],
        filter_empty_gt=False),
    pipeline=[
        dict(type='Mosaic', img_scale=(640, 640), pad_val=114.0),
        dict(
            type='RandomAffine',
            scaling_ratio_range=(0.1, 2),
            border=(-320, -320)),
        dict(
            type='MixUp',
            img_scale=(640, 640),
            ratio_range=(0.8, 1.6),
            pad_val=114.0),
        dict(type='YOLOXHSVRandomAug'),
        dict(type='RandomFlip', flip_ratio=0.5),
        dict(type='Resize', img_scale=(640, 640), keep_ratio=True),
        dict(
            type='Pad',
            pad_to_square=True,
            pad_val=dict(img=(114.0, 114.0, 114.0))),
        dict(
            type='FilterAnnotations', min_gt_bbox_wh=(1, 1), keep_empty=False),
        dict(type='DefaultFormatBundle'),
        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
    ])
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(640, 640),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Pad',
                pad_to_square=True,
                pad_val=dict(img=(114.0, 114.0, 114.0))),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=4,
    persistent_workers=True,
    train=dict(
        type='BINARY_ESG_Dataset',
        dataset=dict(
            type='CocoDataset',
            ann_file='./data/binary/annotations/instances_train_esg.json',
            img_prefix='./data/binary/train_esg/',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True)
            ],
            filter_empty_gt=False),
        pipeline=[
            dict(type='Mosaic', img_scale=(640, 640), pad_val=114.0),
            dict(
                type='RandomAffine',
                scaling_ratio_range=(0.1, 2),
                border=(-320, -320)),
            dict(
                type='MixUp',
                img_scale=(640, 640),
                ratio_range=(0.8, 1.6),
                pad_val=114.0),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='Resize', img_scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad',
                pad_to_square=True,
                pad_val=dict(img=(114.0, 114.0, 114.0))),
            dict(
                type='FilterAnnotations',
                min_gt_bbox_wh=(1, 1),
                keep_empty=False),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='./data/binary/annotations/instances_val_esg.json',
        img_prefix='./data/binary/val_esg/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(640, 640),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Pad',
                        pad_to_square=True,
                        pad_val=dict(img=(114.0, 114.0, 114.0))),
                    dict(type='DefaultFormatBundle'),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='./data/binary/annotations/instances_val_esg.json',
        img_prefix='./data/binary/test_esg/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(640, 640),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Pad',
                        pad_to_square=True,
                        pad_val=dict(img=(114.0, 114.0, 114.0))),
                    dict(type='DefaultFormatBundle'),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
max_epochs = 300
num_last_epochs = 15
interval = 10
evaluation = dict(
    save_best='auto', interval=10, dynamic_intervals=[(285, 1)], metric='bbox')
work_dir = './work_dirs\BINARY_yolox_x_8x8_300e_coco'
auto_resume = False
gpu_ids = [0]

2022-11-26 00:08:35,383 - mmdet - INFO - Set random seed to 1616118349, deterministic: False
2022-11-26 00:08:36,479 - mmdet - INFO - initialize CSPDarknet with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d', 'a': 2.23606797749979, 'distribution': 'uniform', 'mode': 'fan_in', 'nonlinearity': 'leaky_relu'}
2022-11-26 00:08:36,776 - mmdet - INFO - initialize YOLOXPAFPN with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d', 'a': 2.23606797749979, 'distribution': 'uniform', 'mode': 'fan_in', 'nonlinearity': 'leaky_relu'}
2022-11-26 00:08:37,000 - mmdet - INFO - initialize YOLOXHead with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d', 'a': 2.23606797749979, 'distribution': 'uniform', 'mode': 'fan_in', 'nonlinearity': 'leaky_relu'}
Name of parameter - Initialization information

backbone.stem.conv.conv.weight - torch.Size([80, 12, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stem.conv.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stem.conv.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.0.conv.weight - torch.Size([160, 80, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.0.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.0.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.main_conv.conv.weight - torch.Size([80, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.main_conv.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.main_conv.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.short_conv.conv.weight - torch.Size([80, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.short_conv.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.short_conv.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.final_conv.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.final_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.final_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([80, 80, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv2.conv.weight - torch.Size([80, 80, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.0.conv2.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv2.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.1.conv1.conv.weight - torch.Size([80, 80, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.1.conv1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.1.conv1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.1.conv2.conv.weight - torch.Size([80, 80, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.1.conv2.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.1.conv2.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.2.conv1.conv.weight - torch.Size([80, 80, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.2.conv1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.2.conv1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.2.conv2.conv.weight - torch.Size([80, 80, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.2.conv2.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.2.conv2.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.3.conv1.conv.weight - torch.Size([80, 80, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.3.conv1.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.3.conv1.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.3.conv2.conv.weight - torch.Size([80, 80, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.3.conv2.bn.weight - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.3.conv2.bn.bias - torch.Size([80]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.0.conv.weight - torch.Size([320, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.main_conv.conv.weight - torch.Size([160, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.main_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.main_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.short_conv.conv.weight - torch.Size([160, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.short_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.short_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.final_conv.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.final_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.final_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.0.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.1.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.1.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.2.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.2.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.3.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.3.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.3.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.3.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.3.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.3.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.4.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.4.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.4.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.4.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.4.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.4.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.5.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.5.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.5.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.5.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.5.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.5.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.6.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.6.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.6.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.6.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.6.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.6.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.7.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.7.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.7.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.7.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.7.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.7.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.8.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.8.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.8.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.8.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.8.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.8.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.9.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.9.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.9.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.9.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.9.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.9.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.10.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.10.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.10.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.10.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.10.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.10.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.11.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.11.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.11.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.11.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.11.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.11.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.0.conv.weight - torch.Size([640, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.0.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.0.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.main_conv.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.main_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.main_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.short_conv.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.short_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.short_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.final_conv.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.final_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.final_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.0.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.1.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.1.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.2.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.2.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.3.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.3.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.3.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.3.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.3.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.3.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.4.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.4.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.4.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.4.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.4.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.4.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.5.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.5.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.5.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.5.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.5.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.5.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.6.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.6.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.6.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.6.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.6.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.6.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.7.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.7.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.7.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.7.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.7.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.7.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.8.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.8.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.8.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.8.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.8.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.8.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.9.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.9.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.9.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.9.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.9.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.9.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.10.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.10.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.10.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.10.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.10.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.10.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.11.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.11.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.11.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.11.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.11.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.11.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.0.conv.weight - torch.Size([1280, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.0.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.0.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv1.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.1.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv2.conv.weight - torch.Size([1280, 2560, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.1.conv2.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv2.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.main_conv.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.main_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.main_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.short_conv.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.short_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.short_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.final_conv.conv.weight - torch.Size([1280, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.final_conv.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.final_conv.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.0.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.1.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.1.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.1.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.1.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.1.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.1.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.2.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.2.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.2.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.2.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.2.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.2.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.3.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.3.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.3.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.3.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.3.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.3.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.0.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.0.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.1.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([320, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([320, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.1.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.1.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.1.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.1.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.1.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.1.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.2.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.2.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.2.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.2.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.2.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.2.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.3.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.3.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.3.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.3.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.3.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.3.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([160, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([160, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.1.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.1.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.1.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.1.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.1.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.1.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.2.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.2.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.2.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.2.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.2.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.2.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.3.conv1.conv.weight - torch.Size([160, 160, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.3.conv1.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.3.conv1.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.3.conv2.conv.weight - torch.Size([160, 160, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.3.conv2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.3.conv2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.1.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.1.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.1.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.1.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.1.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.1.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.1.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.2.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.2.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.2.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.2.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.2.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.2.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.3.conv1.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.3.conv1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.3.conv1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.3.conv2.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.3.conv2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.3.conv2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([640, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([1280, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.1.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.1.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.1.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.1.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.1.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.1.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.2.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.2.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.2.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.2.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.2.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.2.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.3.conv1.conv.weight - torch.Size([640, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.3.conv1.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.3.conv1.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.3.conv2.conv.weight - torch.Size([640, 640, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.3.conv2.bn.weight - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.3.conv2.bn.bias - torch.Size([640]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.0.conv.weight - torch.Size([320, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.1.conv.weight - torch.Size([320, 640, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.2.conv.weight - torch.Size([320, 1280, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.0.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.0.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.1.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.1.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.2.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.2.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.0.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.0.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.1.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.1.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.0.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.2.0.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.0.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.1.conv.weight - torch.Size([320, 320, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.2.1.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.1.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_conv_cls.0.weight - torch.Size([80, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_cls.0.bias - torch.Size([80]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_cls.1.weight - torch.Size([80, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_cls.1.bias - torch.Size([80]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_cls.2.weight - torch.Size([80, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_cls.2.bias - torch.Size([80]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_reg.0.weight - torch.Size([4, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.0.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.1.weight - torch.Size([4, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.1.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.2.weight - torch.Size([4, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.2.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.0.weight - torch.Size([1, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_obj.1.weight - torch.Size([1, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_obj.2.weight - torch.Size([1, 320, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  
